// Generated by CoffeeScript 1.4.0
/*
Module dependencies.
*/

var app, assets, express, flash, http, io, localStrategy, models, passport, path, routes, server, user, _;

express = require("express");

models = require('./models');

routes = require("./routes")(models);

user = require("./routes/user");

http = require("http");

path = require("path");

assets = require("connect-assets");

flash = require("connect-flash");

passport = require('passport');

localStrategy = require('passport-local').Strategy;

_ = require('underscore');

app = express();

passport.serializeUser(function(user, done) {
  return done(null, user.id);
});

passport.deserializeUser(function(id, done) {
  var _this = this;
  return models.User.findById(id, function(err, user) {
    return done(err, user);
  });
});

passport.use(new localStrategy(function(username, password, done) {
  return models.User.findOne({
    name: username
  }, function(err, user) {
    if (err) {
      return done(err);
    }
    if (!user) {
      return done(null, false, {
        message: "ユーザー名かパスワードが不正です"
      });
    }
    if (!user.validatePassword(password)) {
      return done(null, false, {
        message: "ユーザー名かパスワードが不正です"
      });
    }
    return done(null, user);
  });
}));

app.configure(function() {
  app.set("port", process.env.PORT || 3000);
  app.set("views", path.join(__dirname, "../views"));
  app.set("view engine", "jade");
  app.use(express.favicon());
  app.use(express.logger("dev"));
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.cookieParser("your secret here"));
  app.use(express.session());
  app.use(flash());
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(app.router);
  app.use(assets());
  return app.use(express["static"](path.join(__dirname, "../public")));
});

app.configure("development", function() {
  return app.use(express.errorHandler());
});

app.get("/", routes.index);

app.get("/login", routes.login);

app.post("/login", passport.authenticate('local', {
  successRedirect: '/',
  failureRedirect: '/login',
  failureFlash: true
}));

app.get("/logout", routes.logout);

server = http.createServer(app);

io = require('socket.io').listen(server);

server.listen(app.get("port"), function() {
  return console.log("Express server listening on port " + app.get("port"));
});

io.sockets.on('connection', function(socket) {
  var client_names, clients, countClient;
  client_names = [];
  clients = io.sockets.clients();
  countClient = _.after(clients.length, function() {
    return socket.emit('connected', {
      client_names: client_names
    });
  });
  _.each(clients, function(client) {
    return client.get('name', function(err, name) {
      client_names.push(name);
      return countClient();
    });
  });
  socket.on('introduce', function(data) {
    return socket.set('name', data.name, function() {
      return socket.broadcast.emit('some one connected', {
        name: data.name,
        client_names: client_names
      });
    });
  });
  return socket.on('disconnect', function(data) {
    return socket.get('name', function(err, name) {
      return socket.broadcast.emit('some one disconnected', {
        name: name
      });
    });
  });
});
